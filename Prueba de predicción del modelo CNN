import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Flatten, Dense
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

file_path = "D:\\USER\\Downloads\\weekly_scores.xlsx"

try:
    data = pd.read_excel(file_path)
except Exception as e:
    print("Error loading the dataset:", e)
    exit()

print("Shape of data:", data.shape)
print("Columns of data:", data.columns)

num_input_weeks = 5
num_output_weeks = 11

data_train = data.iloc[:58]
data_test = data.iloc[58:]

mse_scores = []
mae_scores = []
r2_scores = []

input_sequences_train = []
output_sequences_train = []

for index, row in data_train.iterrows():
    scores = row.iloc[2:-2].values  # Extract scores from Week 1 to Week 16

    for i in range(len(scores) - num_input_weeks - num_output_weeks + 1):
        input_sequence = scores[i:i+num_input_weeks]
        output_sequence = scores[i+num_input_weeks:i+num_input_weeks+num_output_weeks]
        input_sequences_train.append(input_sequence)
        output_sequences_train.append(output_sequence)

X_train = np.array(input_sequences_train).reshape(-1, num_input_weeks, 1).astype('float32')
y_train = np.array(output_sequences_train).reshape(-1, num_output_weeks).astype('float32')

model = Sequential([
    Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(num_input_weeks, 1)),
    MaxPooling1D(pool_size=2),
    Flatten(),
    Dense(50, activation='relu'),
    Dense(num_output_weeks)
])

model.compile(optimizer='adam', loss='mse')

model.fit(X_train, y_train, epochs=100, verbose=0)

y_pred_train = model.predict(X_train, verbose=0)

y_pred_flat_train = y_pred_train.flatten()
y_true_flat_train = y_train.flatten()

mse_train = mean_squared_error(y_true_flat_train, y_pred_flat_train)
mae_train = mean_absolute_error(y_true_flat_train, y_pred_flat_train)
r2_train = r2_score(y_true_flat_train, y_pred_flat_train)

print("Mean Squared Error (MSE) for the training dataset:", mse_train)
print("Mean Absolute Error (MAE) for the training dataset:", mae_train)
print("R^2 Score for the training dataset:", r2_train)

input_sequences_test = []
output_sequences_test = []

for index, row in data_test.iterrows():
    scores = row.iloc[2:-2].values  # Extract scores from Week 1 to Week 16

    for i in range(len(scores) - num_input_weeks - num_output_weeks + 1):
        input_sequence = scores[i:i+num_input_weeks]
        output_sequence = scores[i+num_input_weeks:i+num_input_weeks+num_output_weeks]
        input_sequences_test.append(input_sequence)
        output_sequences_test.append(output_sequence)

X_test = np.array(input_sequences_test).reshape(-1, num_input_weeks, 1).astype('float32')
y_test = np.array(output_sequences_test).reshape(-1, num_output_weeks).astype('float32')

y_pred_test = model.predict(X_test, verbose=0)

y_pred_flat_test = y_pred_test.flatten()
y_true_flat_test = y_test.flatten()

mse_test = mean_squared_error(y_true_flat_test, y_pred_flat_test)
mae_test = mean_absolute_error(y_true_flat_test, y_pred_flat_test)
r2_test = r2_score(y_true_flat_test, y_pred_flat_test)

print("Mean Squared Error (MSE) for the test dataset:", mse_test)
print("Mean Absolute Error (MAE) for the test dataset:", mae_test)
print("R^2 Score for the test dataset:", r2_test)
